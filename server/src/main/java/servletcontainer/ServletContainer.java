/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package servletcontainer;

import servletcontainer.api.Servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.List;

public class ServletContainer {
    final String DEPLOY_URL = "server/src/main/resources/deploy";

    final private ServletManager servletManager;
    public ServletContainer() {
        servletManager = new ServletManager();
    }

    public ServletManager getServletManager() {
        return this.servletManager;
    }

    public void servletScan() {
        unzipWarFiles();

        File appFolder = new File(DEPLOY_URL);
        File[] apps = appFolder.listFiles();

        for (File app: apps) {
            if (app.getName().endsWith(".war"))
                continue;

            List<URL> folderURLs = new ArrayList<>();
            List<String> classNames = new ArrayList<>();
            folderURLs.addAll(getFolderURLs(app));
            classNames.addAll(getclassNames(app, app.getName()));

            URL[] urls = folderURLs.toArray(new URL[0]);
            ClassLoader cl = new URLClassLoader(urls);

            for (var clsName: classNames) {
                System.out.println(clsName);
                try {
                    Class<?> cls = cl.loadClass(clsName);
                    Servlet annotation = cls.getAnnotation(Servlet.class);
                    if (annotation != null) {
                        servletManager.addServlet(cls,  "/" + app.getName() + annotation.url());
                        System.out.println("Servlet found for url: " + "/" + app.getName() + annotation.url());
                    }
                } catch (ClassNotFoundException e) {
                    throw new RuntimeException(e);
                }
            }
        }

        removeUnzippedFiles();
    }

    private List<URL> getFolderURLs(File folder) {
        List<URL> folderNames = new ArrayList<>();
        try {
            folderNames.add(folder.toURI().toURL());
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }

        File[] files = folder.listFiles();
        for (File file : files)
            if (file.isDirectory())
                folderNames.addAll(getFolderURLs(file));

        return folderNames;
    }

    private List<String> getclassNames(File folder, String packageName) {
        List<String> classNames = new ArrayList<>();

        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                if (file.getName().equals("WEB-INF") || file.getName().equals("classes"))
                    classNames.addAll(getclassNames(file, ""));
                else {
                    String newPackageName = packageName.isEmpty() ? file.getName() : packageName + "." + file.getName();
                    classNames.addAll(getclassNames(file, newPackageName));
                }
            } else if (file.isFile() && file.getName().endsWith(".class")) {
                String className = file.getName().substring(0, file.getName().lastIndexOf("."));
                classNames.add(packageName + "." + className);
            }
        }

        return classNames;
    }

    public void unzipWarFiles() {
        File folder = new File(DEPLOY_URL);
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isFile() && file.getName().endsWith(".war")) {
                try {
                    String warFilePath = file.getAbsolutePath();
                    String warDirPath = warFilePath.substring(0, warFilePath.lastIndexOf("."));

                    File warDir = new File(warDirPath);
                    warDir.mkdir();

                    try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(file))) {
                        ZipEntry entry = zipInputStream.getNextEntry();
                        while (entry != null) {
                            String entryName = entry.getName();
                            File entryFile = new File(warDir, entryName);
                            if (entry.isDirectory()) {
                                entryFile.mkdir();
                            } else {
                                try (FileOutputStream outputStream = new FileOutputStream(entryFile)) {
                                    byte[] buffer = new byte[1024];
                                    int length;
                                    while ((length = zipInputStream.read(buffer)) > 0) {
                                        outputStream.write(buffer, 0, length);
                                    }
                                }
                            }
                            entry = zipInputStream.getNextEntry();
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void removeUnzippedFiles() {
        File folder = new File(DEPLOY_URL);
        File[] files = folder.listFiles();
        for (File file : files)
            if (file.isFile() && !file.getName().endsWith(".war"))
                deleteFolder(file);
    }

    private void deleteFolder(File folder) {
        File[] files = folder.listFiles();
            for(File f: files) {
                if(f.isDirectory()) {
                    deleteFolder(f);
                } else {
                    f.delete();
                }
            }
        folder.delete();
    }
}
